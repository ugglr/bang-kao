import type { NextPage } from "next";
import Head from "next/head";
import { useState } from "react";
import ListToggle from "../components/ListToggle";
import Numpad from "../components/Numpad";
import Question from "../components/Question";
import QuestionsList from "../components/QuestionsList";
import styles from "../styles/Home.module.css";
import { generateQuestions, Question as Q } from "../util";

type Props = {
  questions: Q[];
};
const Under10Page: NextPage<Props> = ({ questions }) => {
  const [listMode, setListMode] = useState<boolean>(false);
  const [index, setIndex] = useState<number>(0);
  const [error, setError] = useState<boolean>(false);
  const [answersInput, setAnswerInput] = useState<number>();
  const [answers, setAnswers] = useState<
    Array<{ ans: number; hasError: boolean }>
  >([]);

  const currentQuestion = questions[index];

  const handleAnswer = () => {
    if (answersInput === currentQuestion.correctAnswer) {
      setIndex((prev) => prev + 1);
      setAnswerInput(undefined);
      setAnswers((prev) => [...prev, { ans: answersInput, hasError: error }]);
      setError(false);
    } else {
      setError(true);
    }
  };

  const handleNbr = (nbr: number) => {
    setError(false);
    const newNbr = parseInt(`${answersInput ?? ""}${nbr}`);
    setAnswerInput(newNbr);
  };

  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <ListToggle {...{ setListMode }} />

        {listMode ? (
          <QuestionsList questions={questions} />
        ) : (
          <div>
            <div
              style={{
                alignItems: "center",
                display: "flex",
                justifyContent: "space-between",
              }}
            >
              <div style={{ display: "flex" }}>
                <Question
                  {...{
                    a: currentQuestion.a,
                    b: currentQuestion.b,
                    sign: currentQuestion.sign,
                  }}
                />
                <h1>{answersInput}</h1>
              </div>
              <h2>{error ? "‚ùå" : " "}</h2>
            </div>

            <Numpad
              onDelete={() => {
                setError(false);
                setAnswerInput(undefined);
              }}
              onSubmit={() => handleAnswer()}
              handleNumber={(nbr) => handleNbr(nbr)}
            />
          </div>
        )}
      </main>
    </div>
  );
};

export default Under10Page;

export const getServerSideProps = () => {
  const questions = generateQuestions(90, 10);

  return {
    props: {
      questions,
    },
  };
};
